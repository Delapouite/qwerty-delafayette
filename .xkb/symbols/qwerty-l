  partial alphanumeric_keys modifier_keys
  xkb_symbols "lafayette_group2" {
    include "pc"

    // The main dead key is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "France - Qwerty";
    name[group2]= "France - AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Options
    // include "capslock(swapescape)"  // Swap CapsLock and Escape -- Vim powwa!
    // include "compose(menu)"         // Compose on the 'Menu' key

    // Digits
    key <AE01> {[ 1               , exclam          , U201E           , exclamdown      ],[ exclam          , exclamdown      ]}; // 1 ! „ ¡ ! ¡
    key <AE02> {[ 2               , at              , U201C           , U2018           ],[ parenleft       , VoidSymbol      ]}; // 2 @ “ ‘ (
    key <AE03> {[ 3               , numbersign      , U201D           , U2019           ],[ parenright      , VoidSymbol      ]}; // 3 # ” ’ )
    key <AE04> {[ 4               , dollar          , sterling        , cent            ],[ equal           , notequal        ]}; // 4 $ £ ¢ = ≠
    key <AE05> {[ 5               , percent         , EuroSign        , U2030           ],[ question        , questiondown    ]}; // 5 % € ‰ ? ¿
    key <AE06> {[ 6               , asciicircum     , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 6 ^
    key <AE07> {[ 7               , ampersand       , bar             , brokenbar       ],[ 7               , VoidSymbol      ]}; // 7 & | ¦ 7
    key <AE08> {[ 8               , asterisk        , infinity        , U2605           ],[ 8               , VoidSymbol      ]}; // 8 * ∞ ★ 8
    key <AE09> {[ 9               , parenleft       , VoidSymbol      , VoidSymbol      ],[ 9               , VoidSymbol      ]}; // 9 (     9
    key <AE10> {[ 0               , parenright      , degree          , VoidSymbol      ],[ slash           , VoidSymbol      ]}; // 0 ) °   /

    // Letters, first row
    key <AD01> {[ q               , Q               , ae              , AE              ],[ minus           , notsign         ]}; // q Q æ Æ - ¬
    key <AD02> {[ w               , W               , eacute          , Eacute          ],[ less            , lessthanequal   ]}; // w W é É < ≤
    key <AD03> {[ e               , E               , egrave          , Egrave          ],[ greater         , greaterthanequal]}; // e E è È > ≥
    key <AD04> {[ r               , R               , registered      , trademark       ],[ slash           , VoidSymbol      ]}; // r R ® ™ /
    key <AD05> {[ t               , T               , thorn           , Thorn           ],[ backslash       , VoidSymbol      ]}; // t T þ Þ \
    key <AD06> {[ y               , Y               , yen             , currency        ],[ VoidSymbol      , VoidSymbol      ]}; // y Y ¥ ¤
    key <AD07> {[ u               , U               , ugrave          , Ugrave          ],[ 4               , VoidSymbol      ]}; // u U ù Ù 4
    key <AD08> {[ i               , I               , U0133           , U0132           ],[ 5               , VoidSymbol      ]}; // i I ĳ Ĳ 5
    key <AD09> {[ o               , O               , oe              , OE              ],[ 6               , VoidSymbol      ]}; // o O œ Œ 6
    key <AD10> {[ p               , P               , section         , paragraph       ],[ asterisk        , VoidSymbol      ]}; // p P § ¶ *

    // Letters, second row
    key <AC01> {[ a               , A               , agrave          , Agrave          ],[ braceleft       , VoidSymbol      ]}; // a A à À {
    key <AC02> {[ s               , S               , ssharp          , U1E9E           ],[ bracketleft     , VoidSymbol      ]}; // s S ß ẞ [
    key <AC03> {[ d               , D               , eth             , Eth             ],[ bracketright    , VoidSymbol      ]}; // d D ð Ð ]
    key <AC04> {[ f               , F               , U017F           , ordfeminine     ],[ braceright      , VoidSymbol      ]}; // f F ſ ª }
    key <AC05> {[ g               , G               , copyright       , cent            ],[ bar             , brokenbar       ]}; // g G © ¢ | ¦
    key <AC06> {[ h               , H               , leftarrow       , U21D0           ],[ VoidSymbol      , VoidSymbol      ]}; // h H ← ⇐
    key <AC07> {[ j               , J               , downarrow       , U21D3           ],[ 1               , VoidSymbol      ]}; // j J ↓ ⇓ 1
    key <AC08> {[ k               , K               , uparrow         , U21D1           ],[ 2               , VoidSymbol      ]}; // k K ↑ ⇑ 2
    key <AC09> {[ l               , L               , rightarrow      , U21D2           ],[ 3               , VoidSymbol      ]}; // l L → ⇒ 3
    key <AC10> {[ ISO_Level3_Latch, ISO_Level3_Latch, grave           , grave           ],[ minus           , VoidSymbol      ]}; // ’ ’ ` ` -

    // Letters, third row
    key <AB01> {[ z               , Z               , less            , lessthanequal   ],[ VoidSymbol      , VoidSymbol      ]}; // z Z < ≤
    key <AB02> {[ x               , X               , greater         , greaterthanequal],[ VoidSymbol      , VoidSymbol      ]}; // x X > ≥
    key <AB03> {[ c               , C               , ccedilla        , Ccedilla        ],[ VoidSymbol      , VoidSymbol      ]}; // c C ç Ç
    key <AB04> {[ v               , V               , ubreve          , Ubreve          ],[ VoidSymbol      , VoidSymbol      ]}; // v V ŭ Ŭ
    key <AB05> {[ b               , B               , dagger          , doubledagger    ],[ VoidSymbol      , VoidSymbol      ]}; // b B † ‡
    key <AB06> {[ n               , N               , ntilde          , Ntilde          ],[ VoidSymbol      , VoidSymbol      ]}; // n N ñ Ñ
    key <AB07> {[ m               , M               , mu              , masculine       ],[ 0               , VoidSymbol      ]}; // m M µ º 0
    key <AB08> {[ comma           , semicolon       , U2022           , VoidSymbol      ],[ comma           , VoidSymbol      ]}; // , ; •   ,
    key <AB09> {[ period          , colon           , ellipsis        , periodcentered  ],[ period          , VoidSymbol      ]}; // . : … · .
    key <AB10> {[ slash           , question        , backslash       , questiondown    ],[ plus            , VoidSymbol      ]}; // / ? \ ¿ +

    // Pinky keys
    key <TLDE> {[ grave           , asciitilde      , dead_grave      , dead_tilde      ],[ dead_grave      , dead_tilde      ]}; // ` ~ ` ~ ` ~
    key <AE11> {[ minus           , underscore      , emdash          , endash          ],[ VoidSymbol      , VoidSymbol      ]}; // - _ — –
    key <AE12> {[ equal           , plus            , notequal        , plusminus       ],[ VoidSymbol      , VoidSymbol      ]}; // = + ≠ ±
    key <AD11> {[ dead_circumflex , guillemotleft   , bracketleft     , braceleft       ],[ VoidSymbol      , VoidSymbol      ]}; // ^ « [ {
    key <AD12> {[ dead_diaeresis  , guillemotright  , bracketright    , braceright      ],[ VoidSymbol      , VoidSymbol      ]}; // ¨ » ] }
    key <AC11> {[ apostrophe      , quotedbl        , dead_acute      , dead_abovedot   ],[ dead_acute      , dead_abovedot   ]}; // ' " ´ ˙ ´ ˙
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ],[ backslash       , brokenbar       ]}; // \ |     \ ¦
    key <LSGT> {[ less            , greater         , lessthanequal   , greaterthanequal],[ lessthanequal   , greaterthanequal]}; // < > ≤ ≥ ≤ ≥

    // Spacebar
    key <SPCE> {[ space, nobreakspace, rightsinglequotemark, U202F ],[ Escape, nobreakspace ]};

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium (no idea why).
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };

